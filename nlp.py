import re
import en_core_web_sm #English
import pt_core_news_sm #Portuguese
import ru_core_news_sm #Russian
import zh_core_web_sm #Mandarim
import ja_core_news_sm #Japanese
import es_core_news_sm #Spanish
import de_core_news_sm #German
import fr_core_news_sm #French
import it_core_news_sm #Italian
from langdetect import detect
from translate import Translator

def func_md5pattern(string):
    md5regex = re.compile(r"(^[0-9a-fA-F\d]{32}$)")
    if re.fullmatch(md5regex, string):
        return True
    else:
        return False

def func_sha1pattern(string):
    sha1regex = re.compile(r"(^[0-9a-fA-F\d]{40}$)")
    if re.fullmatch(sha1regex, string):
        return True
    else:
        return False

def func_sha256pattern(string):
    sha256regex = re.compile(r"(^[0-9a-fA-F\d]{64}$)")
    if re.fullmatch(sha256regex, string):
        return True
    else:
        return False

def func_sha512pattern(string):
    sha512regex = re.compile(r"(^[0-9a-fA-F\d]{128}$)")
    if re.fullmatch(sha512regex, string):
        return True
    else:
        return False

def func_emailpattern(string):
    emailregex = re.compile(r"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)")
    if re.fullmatch(emailregex, string):
        return True
    else:
        return False

def func_passwordpattern(string):
    passwordregex = re.compile(r"(^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!#%*?&]{6,20}$)")
    if re.fullmatch(passwordregex, string):
        return True
    else:
        return False

class ProcessString():
    def __init__(self, string):
        self.string = string
        self.return_dict = {}

        self.english_dict = {}
        self.portugue_dict = {}
        self.russian_dict = {}
        self.chinese_dict = {}
        self.japanese_dict = {}
        self.spanish_dict = {}
        self.german_dict = {}
        self.french_dict = {}
        self.italian_dict = {}

        self.english_sentences = {}
        self.portugue_sentences = {}
        self.russian_sentences = {}
        self.chinese_sentences = {}
        self.japanese_sentences = {}
        self.spanish_sentences = {}
        self.german_sentences = {}
        self.french_sentences = {}
        self.italian_sentences = {}

        self.translation = None

    def func_start(self):
        self.func_get_text_language()
        if self.language == 'en':
            self.func_process_english()
        else:
            # self.func_translate_to_english()
            # self.func_process_english()
            if self.language == 'pt':
                self.func_process_portuguese()
            elif self.language == 'ru':
                self.func_process_russian()
            elif self.language == 'zh':
                self.func_process_chinese()
            elif self.language == 'ja':
                self.func_process_japanese()
            elif self.language == 'es':
                self.func_process_spanish()
            elif self.language == 'de':
                self.func_process_german()
            elif self.language == 'fr':
                self.func_process_french()
            elif self.language == 'it': 
                self.func_process_italian()
            else:
                print("[*] Language: " + self.language + " not supported in NLP module yet.")
        
    def get_return_dict(self):
        return self.return_dict

    def func_get_text_language(self):
        self.language = detect(self.string)
        self.return_dict['language'] = self.language

    def func_translate_to_english(self):
        # This function is not used because of the limitations in the Translator
        translator = Translator(to_lang="en", from_lang=self.language)
        split_string = self.string.split(' ')
        translated_list = []
        for word in split_string:
            try:
                translated_word = translator.translate(word)
            except StopIteration:
                pass
            translated_list.append(translated_word)
        self.translation = ' '.join(translated_list)
        self.return_dict['translation'] = translated_list

    def func_process_english(self):
        nlp = en_core_web_sm.load()
        if self.translation is not None:
            doc = nlp(self.translation)
        else:
            doc = nlp(self.string)

        for sentence in doc.sents:
            sentence = str(sentence).replace(',', ' ')
            sentence = str(sentence).replace(':', ' ') 
            if 'password' in str(sentence).lower() and 'login' in str(sentence).lower():
                self.english_sentences[sentence] = 'PASSWORD/LOGIN'
            elif 'password' in str(sentence).lower():
                self.english_sentences[sentence] = 'PASSWORD'
            elif 'login' in str(sentence).lower():
                self.english_sentences[sentence] = 'LOGIN'
            else:
                self.english_sentences[sentence] = ''

        for word in doc:
            self.english_dict[word.text] = word.ent_type_

        for key, value in self.english_dict.items():
            if func_md5pattern(key):
                self.english_dict[key] = "MD5"
            elif func_sha1pattern(key):
                self.english_dict[key] = "SHA1"
            elif func_sha256pattern(key):
                self.english_dict[key] = "SHA256"
            elif func_sha512pattern(key):
                self.english_dict[key] = "SHA512"
            elif func_emailpattern(key):
                self.english_dict[key] = "EMAIL"
            elif value == '':
                if func_passwordpattern(key):
                    self.english_dict[key] = "PASSWORD"
                else:
                    self.english_dict[key] = value

        self.return_dict['english_sentences'] = self.english_sentences
        self.return_dict['english_dict'] = self.english_dict

    def func_process_portuguese(self):
        nlp = pt_core_news_sm.load()
        doc = nlp(self.string)

        for sentence in doc.sents:
            sentence = str(sentence).replace(',', ' ')
            sentence = str(sentence).replace(':', ' ') 
            if ('senha' in str(sentence).lower() and 'login' in str(sentence).lower()) or ('password' in str(sentence).lower() and 'login' in str(sentence).lower()):
                self.portugue_sentences[sentence] = 'PASSWORD/LOGIN'
            elif ('senha' in str(sentence).lower()) or ('password' in str(sentence).lower()):
                self.portugue_sentences[sentence] = 'PASSWORD'
            elif ('login' in str(sentence).lower()) or ('login' in str(sentence).lower()):
                self.portugue_sentences[sentence] = 'LOGIN'
            else:
                self.portugue_sentences[sentence] = ''

        for word in doc:
            self.portugue_dict[word.text] = word.ent_type_

        for key, value in self.portugue_dict.items():
            if func_md5pattern(key):
                self.portugue_dict[key] = "MD5"
            elif func_sha1pattern(key):
                self.portugue_dict[key] = "SHA1"
            elif func_sha256pattern(key):
                self.portugue_dict[key] = "SHA256"
            elif func_sha512pattern(key):
                self.portugue_dict[key] = "SHA512"
            elif func_emailpattern(key):
                self.portugue_dict[key] = "EMAIL"
            elif value == '':
                if func_passwordpattern(key):
                    self.portugue_dict[key] = "PASSWORD"
                else:
                    self.portugue_dict[key] = value

        self.return_dict['portugue_sentences'] = self.portugue_sentences
        self.return_dict['portugue_dict'] = self.portugue_dict

    def func_process_russian(self):
        nlp = ru_core_news_sm.load()
        doc = nlp(self.string)

        for sentence in doc.sents:
            sentence = str(sentence).replace(',', ' ')
            sentence = str(sentence).replace(':', ' ') 
            if ('пароль' in str(sentence).lower() and 'логин' in str(sentence).lower()) or ('password' in str(sentence).lower() and 'login' in str(sentence).lower()):
                self.russian_sentences[sentence] = 'PASSWORD/LOGIN'
            elif ('пароль' in str(sentence).lower())  or ('password' in str(sentence).lower()):
                self.russian_sentences[sentence] = 'PASSWORD'
            elif ('логин' in str(sentence).lower())  or ('login' in str(sentence).lower()):
                self.russian_sentences[sentence] = 'LOGIN'
            else:
                self.russian_sentences[sentence] = ''

        for word in doc:
            self.russian_dict[word.text] = word.ent_type_

        for key, value in self.russian_dict.items():
            if func_md5pattern(key):
                self.russian_dict[key] = "MD5"
            elif func_sha1pattern(key):
                self.russian_dict[key] = "SHA1"
            elif func_sha256pattern(key):
                self.russian_dict[key] = "SHA256"
            elif func_sha512pattern(key):
                self.russian_dict[key] = "SHA512"
            elif func_emailpattern(key):
                self.russian_dict[key] = "EMAIL"
            elif value == '':
                if func_passwordpattern(key):
                    self.russian_dict[key] = "PASSWORD"
                else:
                    self.russian_dict[key] = value

        self.return_dict['russian_sentences'] = self.russian_sentences
        self.return_dict['russian_dict'] = self.russian_dict

    def func_process_chinese(self):
        nlp = zh_core_web_sm.load()
        doc = nlp(self.string)

        for sentence in doc.sents:
            sentence = str(sentence).replace(',', ' ')
            sentence = str(sentence).replace(':', ' ') 
            if ('密码' in str(sentence).lower() and '登录' in str(sentence).lower()) or ('password' in str(sentence).lower() and 'login' in str(sentence).lower()):
                self.chinese_sentences[sentence] = 'PASSWORD/LOGIN'
            elif ('密码' in str(sentence).lower()) or ('password' in str(sentence).lower()):
                self.chinese_sentences[sentence] = 'PASSWORD'
            elif ('登录' in str(sentence).lower()) or ('login' in str(sentence).lower()):
                self.chinese_sentences[sentence] = 'LOGIN'
            else:
                self.chinese_sentences[sentence] = ''

        for word in doc:
            self.chinese_dict[word.text] = word.ent_type_

        for key, value in self.chinese_dict.items():
            if func_md5pattern(key):
                self.chinese_dict[key] = "MD5"
            elif func_sha1pattern(key):
                self.chinese_dict[key] = "SHA1"
            elif func_sha256pattern(key):
                self.chinese_dict[key] = "SHA256"
            elif func_sha512pattern(key):
                self.chinese_dict[key] = "SHA512"
            elif func_emailpattern(key):
                self.chinese_dict[key] = "EMAIL"
            elif value == '':
                if func_passwordpattern(key):
                    self.chinese_dict[key] = "PASSWORD"
                else:
                    self.chinese_dict[key] = value

        self.return_dict['chinese_sentences'] = self.chinese_sentences
        self.return_dict['chinese_dict'] = self.chinese_dict

    def func_process_japanese(self):
        nlp = ja_core_news_sm.load()
        doc = nlp(self.string)

        for sentence in doc.sents:
            sentence = str(sentence).replace(',', ' ')
            sentence = str(sentence).replace(':', ' ') 
            if ('パスワード' in str(sentence).lower() and 'ログイン' in str(sentence).lower()) or ('password' in str(sentence).lower() and 'login' in str(sentence).lower()):
                self.japanese_sentences[sentence] = 'PASSWORD/LOGIN'
            elif ('パスワード' in str(sentence).lower()) or ('password' in str(sentence).lower()):
                self.japanese_sentences[sentence] = 'PASSWORD'
            elif ('ログイン' in str(sentence).lower()) or ('login' in str(sentence).lower()):
                self.japanese_sentences[sentence] = 'LOGIN'
            else:
                self.japanese_sentences[sentence] = ''

        for word in doc:
            self.japanese_dict[word.text] = word.ent_type_

        for key, value in self.japanese_dict.items():
            if func_md5pattern(key):
                self.japanese_dict[key] = "MD5"
            elif func_sha1pattern(key):
                self.japanese_dict[key] = "SHA1"
            elif func_sha256pattern(key):
                self.japanese_dict[key] = "SHA256"
            elif func_sha512pattern(key):
                self.japanese_dict[key] = "SHA512"
            elif func_emailpattern(key):
                self.japanese_dict[key] = "EMAIL"
            elif value == '':
                if func_passwordpattern(key):
                    self.japanese_dict[key] = "PASSWORD"
                else:
                    self.japanese_dict[key] = value

        self.return_dict['japanese_sentences'] = self.japanese_sentences
        self.return_dict['japanese_dict'] = self.japanese_dict

    def func_process_spanish(self):
        nlp = es_core_news_sm.load()
        doc = nlp(self.string)

        for sentence in doc.sents:
            sentence = str(sentence).replace(',', ' ')
            sentence = str(sentence).replace(':', ' ') 
            if ('contraseña' in str(sentence).lower() and 'login' in str(sentence).lower()) or ('password' in str(sentence).lower() and 'login' in str(sentence).lower()):
                self.spanish_sentences[sentence] = 'PASSWORD/LOGIN'
            elif ('contraseña' in str(sentence).lower()) or ('password' in str(sentence).lower()):
                self.spanish_sentences[sentence] = 'PASSWORD'
            elif ('login' in str(sentence).lower()):
                self.spanish_sentences[sentence] = 'LOGIN'
            else:
                self.spanish_sentences[sentence] = ''

        for word in doc:
            self.spanish_dict[word.text] = word.ent_type_

        for key, value in self.spanish_dict.items():
            if func_md5pattern(key):
                self.spanish_dict[key] = "MD5"
            elif func_sha1pattern(key):
                self.spanish_dict[key] = "SHA1"
            elif func_sha256pattern(key):
                self.spanish_dict[key] = "SHA256"
            elif func_sha512pattern(key):
                self.spanish_dict[key] = "SHA512"
            elif func_emailpattern(key):
                self.spanish_dict[key] = "EMAIL"
            elif value == '':
                if func_passwordpattern(key):
                    self.spanish_dict[key] = "PASSWORD"
                else:
                    self.spanish_dict[key] = value

        self.return_dict['spanish_sentences'] = self.spanish_sentences
        self.return_dict['spanish_dict'] = self.spanish_dict

    def func_process_german(self):
        nlp = de_core_news_sm.load()
        doc = nlp(self.string)

        for sentence in doc.sents:
            sentence = str(sentence).replace(',', ' ')
            sentence = str(sentence).replace(':', ' ') 
            if ('passwort' in str(sentence).lower() and 'login' in str(sentence).lower()) or ('password' in str(sentence).lower() and 'login' in str(sentence).lower()):
                self.german_sentences[sentence] = 'PASSWORD/LOGIN'
            elif ('passwort' in str(sentence).lower()) or ('password' in str(sentence).lower()):
                self.german_sentences[sentence] = 'PASSWORD'
            elif ('login' in str(sentence).lower()):
                self.german_sentences[sentence] = 'LOGIN'
            else:
                self.german_sentences[sentence] = ''

        for word in doc:
            self.german_dict[word.text] = word.ent_type_

        for key, value in self.german_dict.items():
            if func_md5pattern(key):
                self.german_dict[key] = "MD5"
            elif func_sha1pattern(key):
                self.german_dict[key] = "SHA1"
            elif func_sha256pattern(key):
                self.german_dict[key] = "SHA256"
            elif func_sha512pattern(key):
                self.german_dict[key] = "SHA512"
            elif func_emailpattern(key):
                self.german_dict[key] = "EMAIL"
            elif value == '':
                if func_passwordpattern(key):
                    self.german_dict[key] = "PASSWORD"
                else:
                    self.german_dict[key] = value

        self.return_dict['german_sentences'] = self.german_sentences
        self.return_dict['german_dict'] = self.german_dict

    def func_process_french(self):
        nlp = fr_core_news_sm.load()
        doc = nlp(self.string)

        for sentence in doc.sents:
            sentence = str(sentence).replace(',', ' ')
            sentence = str(sentence).replace(':', ' ') 
            if ('mot de passe' in str(sentence).lower() and 'login' in str(sentence).lower()) or ('password' in str(sentence).lower() and 'login' in str(sentence).lower()):
                self.french_sentences[sentence] = 'PASSWORD/LOGIN'
            elif ('mot de passe' in str(sentence).lower()) or ('password' in str(sentence).lower()):
                self.french_sentences[sentence] = 'PASSWORD'
            elif ('login' in str(sentence).lower()):
                self.french_sentences[sentence] = 'LOGIN'
            else:
                self.french_sentences[sentence] = ''

        for word in doc:
            self.french_dict[word.text] = word.ent_type_

        for key, value in self.french_dict.items():
            if func_md5pattern(key):
                self.french_dict[key] = "MD5"
            elif func_sha1pattern(key):
                self.french_dict[key] = "SHA1"
            elif func_sha256pattern(key):
                self.french_dict[key] = "SHA256"
            elif func_sha512pattern(key):
                self.french_dict[key] = "SHA512"
            elif func_emailpattern(key):
                self.french_dict[key] = "EMAIL"
            elif value == '':
                if func_passwordpattern(key):
                    self.french_dict[key] = "PASSWORD"
                else:
                    self.french_dict[key] = value

        self.return_dict['french_sentences'] = self.french_sentences
        self.return_dict['french_dict'] = self.french_dict

    def func_process_italian(self):
        nlp = it_core_news_sm.load()
        doc = nlp(self.string)

        for sentence in doc.sents:
            sentence = str(sentence).replace(',', ' ')
            sentence = str(sentence).replace(':', ' ') 
            if ('password' in str(sentence).lower() and 'login' in str(sentence).lower()) or ('password' in str(sentence).lower() and 'login' in str(sentence).lower()):
                self.italian_sentences[sentence] = 'PASSWORD/LOGIN'
            elif ('password' in str(sentence).lower()):
                self.italian_sentences[sentence] = 'PASSWORD'
            elif ('login' in str(sentence).lower()):
                self.italian_sentences[sentence] = 'LOGIN'
            else:
                self.italian_sentences[sentence] = ''

        for word in doc:
            self.italian_dict[word.text] = word.ent_type_

        for key, value in self.doc_dict.items():
            if func_md5pattern(key):
                self.italian_dict[key] = "MD5"
            elif func_sha1pattern(key):
                self.italian_dict[key] = "SHA1"
            elif func_sha256pattern(key):
                self.italian_dict[key] = "SHA256"
            elif func_sha512pattern(key):
                self.italian_dict[key] = "SHA512"
            elif func_emailpattern(key):
                self.italian_dict[key] = "EMAIL"
            elif value == '':
                if func_passwordpattern(key):
                    self.italian_dict[key] = "PASSWORD"
                else:
                    self.italian_dict[key] = value

        self.return_dict['italian_sentences'] = self.italian_sentences
        self.return_dict['italian_dict'] = self.italian_dict
